import numpy as np
import pandas as pd
import os # -> for the directory separator
from pathlib import PurePosixPath, PureWindowsPath


class FileReader():
    @staticmethod
    def load_data(fname):
        # Raw data: '<i2' indicates that the binary integers are stored with 2 bytes little-endian
        data = np.fromfile(fname, dtype = '<i2')
        return data

    @staticmethod
    def load_duration(fname):
        # Load the txt data
        f = open(fname, 'r')
        content = f.read()
        # Split with the lines
        content_list = content.split("\n")
        # Start time = index 2
        start = float(content_list[2].split(":")[1]) #[s]
        # End time = index 3
        end = float(content_list[3].split(":")[1]) # [s]
        return round(end - start, 9) # [s]


#========================================================================================
#========================================================================================    

class LaserDataInteractor():
    """
    Example usage:
        #--- setup
        interactor = LaserDataInteractor()
        interactor.df = metadf
        interactor.df_row = '1_1'
        #--- load the raw data
        ch1, dt1 = interactor.load(chNo=1, path=XXX, ret_dt=True)
    """
    
    def __init__(self):
        pass
        
    # ----------------------------
    # Metadata: dataframe version of the Versuchstabelle
    # ----------------------------
    @property
    def df(self):
        return self._df
    
    @df.setter
    def df(self, metadf):
        """
        Parameters
        ----------
            metadf: pandas dataframe of the metadata
                Metadata of the measurement setup.
                This can be either 
                    * Versuchstabelle
                    * Metadata generated by annotation class MetadataGenerator.
                    
        """
        self._df = metadf.copy()
        
    # ----------------------------
    # Information of the desired trial as a dataframe
    # (each row of self.df corresponds to a single trial)
    # ----------------------------
    @property
    def trialNo(self):
        return self._trialNo
    
    @trialNo.setter
    def trialNo(self, trialNo):
        self._trialNo = str(trialNo)
        # Reset the fname
        self.fname = None
    
    
    @property
    def df_row(self):
        return self._df_row
    
    @df_row.setter
    def df_row(self, trialNo):
        """
        Parameter
        ---------
            trialNo: str
                (e.g.) '1_12'
        """
        self.trialNo = trialNo
        self._df_row = self.df[self.df['DEWETRON']==trialNo].reset_index()
        
    # ----------------------------
    # File name
    # ---------------------------- 
    @property
    def fname(self):
        return self._fname
    
    @fname.setter
    def fname(self, info):
        # Setting up the file name
        # !!! Varies depending on the campaign!!!
        # -> for iHub 2023: Ch1 & 2 = structure borne, Ch3 = airborne, Ch4 = synch signal
        if info is not None:
            qassNo, chNo, path = info
            fname_prefix = '20231016_TU_Ilmenau_Process'
            fname_suffix = 'SIG_Raw_compress_1'
            fname = f'{path}/{fname_prefix}_{qassNo}_Ch{chNo}_{fname_suffix}'
            # Adjust the directory separator
            self._fname = fname.replace('/', os.sep)
        # In case for resetting the fname (i.e. fname == None)
        else: 
            self._fname = None
    
    # ----------------------------
    # Data loading
    # ---------------------------- 
    def load(self, chNo, path, qassNo=None, ret_dt=False):
        """
        Parameters
        ----------
            chNo: int
            path: str
                relative path the the raw data
            qassNo: str
                Can be given directly to use it as standalone 
                (without loading the dataframe into the interactor class)
                None by default, in this case self.df_row should be set beforehand
            ret_dt: boolean
                True, if dt is to be returned
        """
        if qassNo is None:
            # Data number (e.g.) 040
            qassNo = str(int(self.df_row['QASS'].values[0])).zfill(3)
            
        # Set the file name
        self.fname = (qassNo, chNo, path)
        
        # Instantiate the file reader
        reader = FileReader()
        # data
        data = reader.load_data(f'{self.fname}.bin')
        # dt based on the given duration (in the txt file)
        T = reader.load_duration(f'{self.fname}.txt') #[s]
        dt = T / len(data) #[s]
        
        if ret_dt == True:
            return data, dt
        else:
            return data
        